import modules.viewx_label
import modules.viewx_common

ViewXModel:
    tx_import=Import
    // support wildcard * and separator ;
    (apply_to=ApplyTo)?
    (stylesheet=Stylesheet)?
    views+=ClassView
;

Import:
    'tximport' model=ID 'from' path=TxPathRegEx
;

TxPathRegEx:
    /"\.?(\w|\.\.|\/|[-])+(\.tx)?"/
;

ApplyTo:
    'apply' 'to' regex=/"((\w|\*(?!\*))+\.(\w|\*(?!\*))+)(;(\w|\*(?!\*))+\.(\w|\*(?!\*))+)*"/
;

Stylesheet:
    (overwrite='overwrite')? 'style' ':' style=StyleProperty ':' 'style' 'end'
;

OverwriteStyle:
    overwrite='overwrite'
;

StyleProperty[noskipws]:
    /(.|\n)*?(?=:\s*style\s*end)/
;

ClassView:
    'view' name=ID 'as' shape=Shape (('child' 'of' parent_view=[ClassView]) | ( 'inside' container=Shape))? ('where' 'this' '=' conditional_parent=[ClassView] ('.' class_properties+=ID['.']))?
    ('{' properties+=ViewProperty '}')?
;

Shape:
    'None' | 'Graph' | 'State' | 'Line' | /\w+/
;

ViewProperty:
    ShapeProperty | Label | EdgeProperty | ContainerProperty | SelectedProperty
;

ShapeProperty:
    BackgroundProperty | StrokeProperty | BorderProperty
;

Label:
    'label' ':' (pre_label=PreLabel)? (label=STRING | label=ClassLabel) ('{' label_properties+=LabelProperty '}')? (post_label=PostLabel)?
;

ViewLabel:
    'label' ':' (pre_label=PreLabel)? (label=STRING | label=ClassLabel) ('{' label_properties+=LabelProperty '}')? (post_label=PostLabel)?
;

ParentLabel:
    'parent_label' ':' (pre_label=PreLabel)? (label=STRING | label=ClassLabel) ('{' label_properties+=LabelProperty '}')? (post_label=PostLabel)?
;

ClassLabel:
    class_view=[ClassView] ('.' class_properties+=ID['.'])?
;

PreLabel:
    label=STRING '+'
;

PostLabel:
    '+' label=STRING
;

// edge related rules

EdgeProperty:
    EdgeStartProperty | EdgeEndProperty | PropertyLink
;

EdgeStartProperty:
    'from' ':' class_view=[ClassView] ('.' class_properties+=ID['.']) // this class property needs to be defined here as ClassView
    ('{' arrow_properties+=ArrowProperty '}')?
;

EdgeEndProperty:
    'to' ':' class_view=[ClassView] ('.' class_properties+=ID['.'])
    ('{' arrow_properties+=ArrowProperty '}')?
;

PropertyLink:
    'link' '{' 
        (link_from=LinkFromProperty)?
        link_to=LinkToProperty?
        properties*=LinkProperties
    '}'
;

LinkProperties:
    StrokeProperty | Label
;

LinkFromProperty:
    'from' ':' ('this' | class_view=[ClassView])?
    ('{' arrow_properties+=ArrowProperty '}')?
;

LinkToProperty:
    'to' ':' class_view=[ClassView] ('.' class_properties+=ID['.'])
    ('{' arrow_properties+=ArrowProperty '}')?
;

ArrowProperty:
    ArrowShapeProperty | EndpointDistance
;

EndpointDistance:
    'distance' ':' distance=INT
;

ArrowShapeProperty:
    'arrow' ':' (color=Color)? scale=INT (shape=ArrowShape)? (fill=ArrowFill)?
;

ArrowShape:
    'tee' | 'triangle' | 'triangle-tee' | 'triangle-cross' | 'triangle-backcurve' | 'square' | 'circle' | 'diamond' | 'none'
;

ArrowFill:
    'filled' | 'hollow'
;

ContainerProperty:
    'container' '{' properties+=ViewProperty '}'
;

SelectedProperty:
    'selected' '{' properties+=ViewProperty '}'
;

Comment:
  /\/\/.*$/
;