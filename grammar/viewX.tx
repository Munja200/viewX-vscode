import viewx_label
import viewx_common

ViewXModel:
    tx_import=Import
    // support wildcard * and separator ;
    (apply_to=ApplyTo)?
    views+=ClassView
;

Import:
    'tximport' model=ID 'from' path=TxPathRegEx
;

TxPathRegEx:
    /"\.?(\w|\.\.|\/|[-])+(\.tx)?"/
;

ApplyTo:
    'apply' 'to' regex=/"((\w|\*(?!\*))+\.(\w|\*(?!\*))+)(;(\w|\*(?!\*))+\.(\w|\*(?!\*))+)*"/
;

ClassView:
    'view' name=ID 'as' shape=Shape ('inside' parentView=[ClassView] ('where' 'this' '=' conditional_parent=[ClassView] ('.' class_properties+=ID['.']))?)?
    ('{' properties+=ViewProperty '}')?
;

Shape:
    'Graph' | 'State' | 'Line' |
    'Ellipse' | 'Triangle' | 'Rectangle' | 'Roundrectangle' | 'Rhomboid' | 'Diamond' | 'Star' | 'Vee'
;

ViewProperty:
    ShapeProperty | Label | EdgeProperty
;

ShapeProperty:
    BackgroundProperty | StrokeProperty | BorderProperty
;

Label:
    'label' ':' (label=STRING | label=ClassLabel) ('{' labelProperties+=LabelProperty '}')?
;

ClassLabel:
    classView=[ClassView] ('.' classProperties+=ID['.'])?
;

// edge related rules

EdgeProperty:
    EdgeStartProperty | EdgeEndProperty | LinkFromProperty | LinkToProperty
;

EdgeStartProperty:
    'from' ':' classView=[ClassView] ('.' classProperties+=ID['.']) // this class property needs to be defined here as ClassView
    ('{' arrowProperties+=ArrowProperty '}')?
;

EdgeEndProperty:
    'to' ':' classView=[ClassView] ('.' classProperties+=ID['.'])
    ('{' arrowProperties+=ArrowProperty '}')?
;

LinkFromProperty:
    'link' 'from' ':' ('this' | classView=[ClassView])?
    ('{' arrowProperties+=ArrowProperty '}')?
;

LinkToProperty:
    'link' 'to' ':' classView=[ClassView] ('.' class_properties+=ID['.']) '(' target_class=[ClassView] ')'
    ('{' arrowProperties+=ArrowProperty '}')?
;

ArrowProperty:
    'arrow' ':' (color=Color)? scale=INT (shape=ArrowShape)? (fill=ArrowFill)?
;

ArrowShape:
    'tee' | 'triangle' | 'triangle-tee' | 'triangle-cross' | 'triangle-backcurve' | 'square' | 'circle' | 'diamond' | 'none'
;

ArrowFill:
    'filled' | 'hollow'
;

Comment:
  /\/\/.*$/
;