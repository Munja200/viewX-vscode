import modules.viewx_label
import modules.viewx_common

ViewXModel:
    tx_import=Import
    // support wildcard * and separator ;
    (apply_to=ApplyTo)?
    (stylesheet=Stylesheet)?
    views+=class_view
;

Import:
    'tximport' model=ID 'from' path=TxPathRegEx
;

TxPathRegEx:
    /"\.?(\w|\.\.|\/|[-])+(\.tx)?"/
;

ApplyTo:
    'apply' 'to' regex=/"((\w|\*(?!\*))+\.(\w|\*(?!\*))+)(;(\w|\*(?!\*))+\.(\w|\*(?!\*))+)*"/
;

Stylesheet:
    '<style>' style=StyleProperty '</style>'
;

StyleProperty[noskipws]:
    /(.|\n)*?(?=<\/style>)/
;

class_view:
    'view' name=ID 'as' shape=Shape ('inside' parent_view=[class_view])? ('where' 'this' '=' conditional_parent=[class_view] ('.' class_properties+=ID['.']))?
    ('{' properties+=ViewProperty '}')?
;

Shape:
    'Graph' | 'State' | 'Line' | /\w+/
;

ViewProperty:
    ShapeProperty | Label | EdgeProperty
;

ShapeProperty:
    BackgroundProperty | StrokeProperty | BorderProperty
;

Label:
    'label' ':' (label=STRING | label=ClassLabel) ('{' label_properties+=LabelProperty '}')?
;

ClassLabel:
    class_view=[class_view] ('.' class_properties+=ID['.'])?
;

// edge related rules

EdgeProperty:
    EdgeStartProperty | EdgeEndProperty | PropertyLink
;

EdgeStartProperty:
    'from' ':' class_view=[class_view] ('.' class_properties+=ID['.']) // this class property needs to be defined here as class_view
    ('{' arrow_properties+=ArrowProperty '}')?
;

EdgeEndProperty:
    'to' ':' class_view=[class_view] ('.' class_properties+=ID['.'])
    ('{' arrow_properties+=ArrowProperty '}')?
;

PropertyLink:
    'link' '{' 
        (link_from=LinkFromProperty)?
        link_to=LinkToProperty?
        properties*=LinkProperties
    '}'
;

LinkProperties:
    StrokeProperty | Label
;

LinkFromProperty:
    'from' ':' ('this' | class_view=[class_view])?
    ('{' arrow_properties+=ArrowProperty '}')?
;

LinkToProperty:
    'to' ':' class_view=[class_view] ('.' class_properties+=ID['.'])
    ('{' arrow_properties+=ArrowProperty '}')?
;

ArrowProperty:
    'arrow' ':' (color=Color)? scale=INT (shape=ArrowShape)? (fill=ArrowFill)?
;

ArrowShape:
    'tee' | 'triangle' | 'triangle-tee' | 'triangle-cross' | 'triangle-backcurve' | 'square' | 'circle' | 'diamond' | 'none'
;

ArrowFill:
    'filled' | 'hollow'
;

Comment:
  /\/\/.*$/
;